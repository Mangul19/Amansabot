게임 : 오버워치
워크샵 코딩 내역

//////////

variables
{
	global:
		0: KINGBALL
		1: max
		2: chan
		3: heal
		4: isim
		5: random

	player:
		0: DVA
		1: DIS
		2: RACA
		3: RAST
		4: GEN
		5: GEN2
		6: DUM
		7: MEK
		8: MEKEF
		9: MEKPO
		10: MEKEF2
		11: RUSIU
		12: BINANG
		13: ANA
		14: SIGMA
		15: SIME
		16: TOR
		17: hubin
		18: meicou
		19: box
		20: moca
}

rule("메세지")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("제작자 : MANGUL"), Custom String("자세한 내용은 설명창의 주소 참조 (버전 : 9.1.0.0)"), Custom String(
			"수정 절대 금지 [워크샵 코드 : -----]"), Right, 0, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
		Global.chan = False;
		Global.heal = False;
		Global.isim = False;
	}
}

rule("랜덤 수 뽑기")
{
	event
	{
		Ongoing - Global;
	}

	action
	{
		Global.max = 15;
		While(True);
			Global.random = Random Integer(0, Global.max);
			Wait(Random Integer(0, 17), Ignore Condition);
		End;
	}
}

rule("0번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 0;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("여기는 달인가??"));
		Wait(0.200, Ignore Condition);
		Set Gravity(All Players(All Teams), 20);
		Wait Until(Global.random != 0, 100000000);
		Set Gravity(All Players(All Teams), 100);
	}
}

rule("1번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 1;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("이거 맞출 수는 있는거야??"));
		Wait(0.200, Ignore Condition);
		Set Projectile Speed(All Players(All Teams), 10);
		Wait Until(Global.random != 1, 100000000);
		Set Projectile Speed(All Players(All Teams), 100);
	}
}

rule("2번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 2;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("워후~~ 부스터 받았어"));
		Wait(0.200, Ignore Condition);
		Set Move Speed(All Players(All Teams), 150);
		Wait Until(Global.random != 2, 100000000);
		Set Move Speed(All Players(All Teams), 100);
	}
}

rule("3번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 3;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("뭐야 다들 소인족이야?"));
		Wait(0.200, Ignore Condition);
		Start Scaling Player(All Players(All Teams), 0.400, True);
		Wait Until(Global.random != 3, 100000000);
		Stop Scaling Player(All Players(All Teams));
	}
}

rule("4번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 4;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("대체 누가 바닥에 끈적이 발라둔거야!!"));
		Wait(0.200, Ignore Condition);
		Set Move Speed(All Players(All Teams), 70);
		Wait Until(Global.random != 4, 100000000);
		Set Move Speed(All Players(All Teams), 100);
	}
}

rule("5번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 5;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("머리 안 부딪히게 조심해~"));
		Wait(0.200, Ignore Condition);
		Start Scaling Player(All Players(All Teams), 1.400, True);
		Wait Until(Global.random != 5, 100000000);
		Stop Scaling Player(All Players(All Teams));
	}
}

rule("6번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 6;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("이게 도움이 되긴 해?"));
		Wait(0.200, Ignore Condition);
		Start Scaling Barriers(All Players(All Teams), 0.100, True);
		Wait Until(Global.random != 6, 100000000);
		Stop Scaling Barriers(All Players(All Teams));
	}
}

rule("7번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 7;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("어딜 보시는거죠? 그건 제 잔상입니다만?"));
		Wait(0.200, Ignore Condition);
		While(Global.random == 7);
			Set Invisible(All Players(All Teams), All);
			Wait(0.500, Ignore Condition);
			Set Invisible(All Players(All Teams), None);
			Wait(0.500, Ignore Condition);
		End;
		Set Invisible(All Players(All Teams), None);
	}
}

rule("8번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 8;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("{0} 안녕 친구들 잘 버텨봐", Hero Icon String(Hero(솜브라))));
		Wait(0.200, Ignore Condition);
		Set Slow Motion(70);
		Wait(Random Integer(3, 7), Ignore Condition);
		Set Slow Motion(100);
		Global.random = Random Integer(0, Global.max);
	}
}

rule("9번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 9;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("이벤트 타임!! 모두 부활하세요!!"));
		Wait(0.200, Ignore Condition);
		Resurrect(All Players(All Teams));
		Wait(Random Integer(1, 3), Ignore Condition);
		Global.random = Random Integer(0, Global.max);
	}
}

rule("10번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 10;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("이벤트 타임!! 모두에게 축복을"));
		Wait(0.200, Ignore Condition);
		Add Health Pool To Player(All Players(All Teams), Shields, 400, False, False);
		Wait(Random Integer(1, 3), Ignore Condition);
		Global.random = Random Integer(0, Global.max);
		Wait(Random Integer(10, 15), Ignore Condition);
		Remove All Health Pools From Player(All Players(All Teams));
	}
}

rule("11번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 11;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("안녕 친구들 내가 누군지 아니?"));
		Wait(0.200, Ignore Condition);
		Global.chan = True;
		Wait(Random Integer(3, 5), Ignore Condition);
		Global.random = Random Integer(0, Global.max);
		Global.chan = False;
	}
}

rule("11-chan")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.random == 11;
		Global.chan == True;
	}

	action
	{
		Wait(0.200, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(All Heroes));
		Wait(1, Ignore Condition);
		Set Ultimate Charge(Event Player, 50);
	}
}

rule("죽을시 초기화")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Alive(Event Player) != True;
	}

	action
	{
		Wait(5, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(All Heroes));
	}
}

rule("12번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 12;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("대체 누가 아군이야??"));
		Disable Nameplates(All Players(All Teams), All Players(All Teams));
		Start Forcing Player Outlines(All Players(All Teams), All Players(All Teams), False, Color(Red), Default);
		Wait Until(Global.random != 12, 100000000);
		Enable Nameplates(All Players(All Teams), All Players(All Teams));
		Stop Forcing Player Outlines(All Players(All Teams), All Players(All Teams));
	}
}

rule("13번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 13;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("아야!! 힐 좀 그만줘!!"));
		Wait(0.200, Ignore Condition);
		Global.heal = True;
		Wait Until(Global.random != 13, 100000000);
		Global.heal = False;
	}
}

rule("13-heal")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	condition
	{
		Global.random == 13;
		Global.heal == True;
	}

	action
	{
		Damage(Event Player, Healer, Event Healing * 2);
	}
}

rule("14번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 14;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("이심전심 너의 아픔 나도 느낄게"));
		Wait(0.200, Ignore Condition);
		Global.isim = True;
		Wait Until(Global.random != 14, 100000000);
		Global.isim = False;
	}
}

rule("14번-D")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	condition
	{
		Global.random == 14;
		Global.isim == True;
	}

	action
	{
		Damage(Event Player, Null, Event Damage);
	}
}

rule("15번 상황")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.random == 15;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("주먹으로만 싸워본적 있어?"));
		Disallow Button(All Players(All Teams), Button(Ultimate));
		Set Primary Fire Enabled(All Players(All Teams), False);
		Set Secondary Fire Enabled(All Players(All Teams), False);
		Set Ability 1 Enabled(All Players(All Teams), False);
		Set Ability 2 Enabled(All Players(All Teams), False);
		Wait Until(Global.random != 15, 100000000);
		Set Primary Fire Enabled(All Players(All Teams), True);
		Set Secondary Fire Enabled(All Players(All Teams), True);
		Set Ability 1 Enabled(All Players(All Teams), True);
		Set Ability 2 Enabled(All Players(All Teams), True);
		Allow Button(All Players(All Teams), Button(Ultimate));
	}
}

rule("사망시 피 회복")
{
	event
	{
		Player Died;
		All;
		All;
	}

	condition
	{
		Is Game In Progress == True;
	}

	action
	{
		Wait(7.100, Ignore Condition);
		Set Max Health(Event Player, 100);
		Set Status(Event Player, Null, Invincible, 2);
		Heal(Event Player, Null, 100000);
	}
}

rule("D.VA 변수 초기화")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	condition
	{
		Has Spawned(Event Player) == True;
	}

	action
	{
		Event Player.DVA = True;
	}
}

rule("D.VA 궁 사용")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.DVA == True;
	}

	action
	{
		Event Player.DVA = False;
		Wait(3, Ignore Condition);
		Set Max Health(All Players(Opposite Team Of(Team Of(Event Player))), 20);
	}
}

rule("D.VA 메카 터질시")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	condition
	{
		Has Status(Event Player, Invincible) == True;
		Is Using Ultimate(Event Player) == False;
		Event Player.DVA == True;
	}

	action
	{
		Event Player.DVA = False;
	}
}

rule("D.VA 메카 탈시 OR 사망시")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	condition
	{
		(Is Dead(Event Player) || Is Using Ultimate(Event Player)) == True;
		Event Player.DVA == False;
	}

	action
	{
		Event Player.DVA = True;
	}
}

rule("레킹볼 변수 초기화")
{
	event
	{
		Ongoing - Global;
	}

	action
	{
		Global.KINGBALL = True;
		If(Current Map != Map(일리오스) && Current Map != Map(왕의 길) && Current Map == Map(부산) && Current Map == Map(블리자드 월드) && False);
			While(True);
				Small Message(All Players(All Teams), Custom String("* 무단 수정물 입니다 *"));
				Wait(1, Ignore Condition);
				Kill(All Players(All Teams), Null);
			End;
		End;
	}
}

rule("레킹볼 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		레킹볼;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
		Global.KINGBALL == True;
	}

	action
	{
		Global.KINGBALL = False;
	}
}

rule("거리 표출")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.KINGBALL == False;
	}

	action
	{
		Create HUD Text(Event Player, Distance Between(Event Player, First Of(Sorted Array(All Living Players(Opposite Team Of(Team Of(
			Event Player))), Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))))), Null, Custom String(
			"제일 가까운 적과의 거리"), Left, 0, Color(Red), Color(White), Color(Red), Visible To and String, Default Visibility);
		Wait(0.100, Ignore Condition);
		Event Player.DIS = Last Text ID;
	}
}

rule("거리 삭제")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.KINGBALL == True;
	}

	action
	{
		Destroy HUD Text(Event Player.DIS);
	}
}

rule("접근 금지 사망")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.KINGBALL == False;
		Distance Between(Event Player, First Of(Sorted Array(All Living Players(Opposite Team Of(Team Of(Event Player))),
			Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))))) <= 10;
	}

	action
	{
		Kill(Event Player, Null);
	}
}

rule("레킹볼 궁 비활성화")
{
	event
	{
		Ongoing - Each Player;
		All;
		레킹볼;
	}

	condition
	{
		Global.KINGBALL == False;
	}

	action
	{
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("레킹볼 궁 활성화")
{
	event
	{
		Ongoing - Each Player;
		All;
		레킹볼;
	}

	condition
	{
		Global.KINGBALL == True;
	}

	action
	{
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("라인 변수 초기화")
{
	event
	{
		Ongoing - Each Player;
		All;
		라인하르트;
	}

	condition
	{
		Has Spawned(Event Player) == True;
	}

	action
	{
		Event Player.RAST = True;
	}
}

rule("라인 궁 사용")
{
	event
	{
		Ongoing - Each Player;
		All;
		라인하르트;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.RAST == True;
	}

	action
	{
		Event Player.RACA = 0;
		Event Player.RAST = False;
	}
}

rule("라인 궁 광클")
{
	event
	{
		Ongoing - Each Player;
		All;
		라인하르트;
	}

	condition
	{
		Event Player.RAST == False;
		Is Jumping(Event Player) == True;
	}

	action
	{
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		If(Event Player.RACA > 6);
			Set Ultimate Charge(Event Player, 0);
			Wait(3, Ignore Condition);
			Event Player.RAST = True;
		End;
		Event Player.RACA += 1;
	}
}

rule("라인 자동 점프")
{
	event
	{
		Ongoing - Each Player;
		All;
		라인하르트;
	}

	condition
	{
		Event Player.RAST == False;
	}

	action
	{
		While(Event Player.RAST == False);
			If(Is On Ground(Event Player) == True);
				Press Button(Event Player, Button(Jump));
			End;
			Wait(0.250, Ignore Condition);
		End;
	}
}

rule("로드호그 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		로드호그;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Communicate(Event Player, Press the Attack);
		Communicate(Event Player, Press the Attack);
		Communicate(Event Player, Press the Attack);
		Set Slow Motion(45);
	}
}

rule("로드호그 궁 끝날시")
{
	event
	{
		Ongoing - Each Player;
		All;
		로드호그;
	}

	condition
	{
		Is Using Ultimate(Event Player) == False;
	}

	action
	{
		Set Slow Motion(100);
	}
}

rule("시그마 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		시그마;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Gravity(All Players(All Teams), 10);
		Set Projectile Gravity(All Players(All Teams), 10);
		Event Player.SIGMA = False;
	}
}

rule("오리사 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		오리사;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(All Players(Opposite Team Of(Team Of(Event Player))), Null, Hacked, 0.100);
		Heal(All Players(Team Of(Event Player)), Event Player, 400);
		Set Status(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, Frozen, 2);
	}
}

rule("원숭이 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		윈스턴;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, Stunned, 3.500);
		Teleport(Event Player, First Of(Sorted Array(All Living Players(Opposite Team Of(Team Of(Event Player))),
			Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))))));
	}
}

rule("자리야 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		자리야;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Press Button(All Players(All Teams), Button(Primary Fire));
		Wait(0.100, Ignore Condition);
		Press Button(All Players(All Teams), Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Press Button(All Players(All Teams), Button(Primary Fire));
		Wait(0.100, Ignore Condition);
		Press Button(All Players(All Teams), Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Press Button(All Players(All Teams), Button(Primary Fire));
		Wait(0.100, Ignore Condition);
		Press Button(All Players(All Teams), Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Press Button(All Players(All Teams), Button(Jump));
		Wait(0.100, Ignore Condition);
		Apply Impulse(All Players(All Teams), Forward, 100, To Player, Incorporate Contrary Motion);
	}
}

rule("레킹볼이 없애기")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.KINGBALL == False;
	}

	action
	{
		Wait(20, Ignore Condition);
		Global.KINGBALL = True;
	}
}

rule("시그마가 없을시")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		0 == Count Of(Players On Hero(Hero(시그마), Team Of(Event Player)));
	}

	action
	{
		Wait(1, Ignore Condition);
		Set Gravity(All Players(All Teams), 100);
		Set Projectile Gravity(All Players(All Teams), 100);
	}
}

rule("둠피 변수 초기화")
{
	event
	{
		Ongoing - Each Player;
		All;
		둠피스트;
	}

	condition
	{
		Has Spawned(Event Player) == True;
	}

	action
	{
		Event Player.DUM = True;
	}
}

rule("둠피스트 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		둠피스트;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Event Player.DUM = False;
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("둠피 궁 찍을시")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Using Ultimate(Event Player) == False;
		Event Player.DUM == False;
	}

	action
	{
		Event Player.DUM = True;
		Kill(Players Within Radius(Event Player, 15, All Teams, Off), Event Player);
		Wait(0.250, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("리퍼 궁 사용시")
{
	event
	{
		Player Dealt Damage;
		All;
		리퍼;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Kill(Victim, Event Player);
	}
}

rule("맥크리 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		맥크리;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Event Player.MEKPO = Position Of(Event Player);
		Set Ultimate Ability Enabled(Event Player, False);
		Event Player.MEK = 500;
		Kill(Event Player, Null);
		Resurrect(Event Player);
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player.MEKPO + Vector(0, Event Player.MEK, 0), 20,
			Visible To Position and Radius);
		Event Player.MEKEF = Last Created Entity;
		Wait(0.100, Ignore Condition);
		Create Effect(All Players(All Teams), Sphere, Color(Red), Event Player.MEKPO + Vector(0, Event Player.MEK, 0), 5,
			Visible To Position and Radius);
		Event Player.MEKEF2 = Last Created Entity;
		For Player Variable(Event Player, MEK, 200, -50, -1);
			Kill(Players Within Radius(Event Player.MEKPO + Vector(0, Event Player.MEK, 0), 20, All Teams, Off), Event Player);
			Wait(0.025, Ignore Condition);
		End;
		Destroy Effect(Event Player.MEKEF);
		Destroy Effect(Event Player.MEKEF2);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("맥이 없을시")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		0 == Count Of(Players On Hero(Hero(맥크리), Team Of(Event Player)));
	}

	action
	{
		Wait(1, Ignore Condition);
		Destroy Effect(Event Player.MEKEF);
		Event Player.MEK = 0;
		Destroy Effect(Event Player.MEKEF2);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("메이 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		메이;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, Frozen, 6.500);
	}
}

rule("바스티온 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		바스티온;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Heal(All Players(Team Of(Event Player)), Event Player, 150);
		Set Move Speed(Event Player, 300);
	}
}

rule("바스티온 궁 끝날시")
{
	event
	{
		Ongoing - Each Player;
		All;
		바스티온;
	}

	condition
	{
		Is Using Ultimate(Event Player) == False;
	}

	action
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("솔저 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		솔저: 76;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
		Set Status(Event Player, Event Player, Invincible, 6);
	}
}

rule("솜브라 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		솜브라;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Kill(Players On Hero(Hero(D.Va), All Teams), Event Player);
		Kill(Players On Hero(Hero(레킹볼), All Teams), Event Player);
		Kill(Players On Hero(Hero(오리사), All Teams), Event Player);
		Kill(Players On Hero(Hero(겐지), All Teams), Event Player);
		Kill(Players On Hero(Hero(바스티온), All Teams), Event Player);
		Kill(Players On Hero(Hero(에코), All Teams), Event Player);
		Kill(Players On Hero(Hero(젠야타), All Teams), Event Player);
		Set Status(Players On Hero(Hero(파라), All Teams), Event Player, Hacked, 5);
	}
}

rule("시메트라 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		시메트라;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		For Player Variable(Event Player, SIME, 0, 5, 1);
			Damage(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, Random Integer(0, 100));
			Wait(0.500, Ignore Condition);
		End;
	}
}

rule("애쉬 궁 사용시")
{
	event
	{
		Player Dealt Damage;
		All;
		애쉬;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(Victim, Event Player, Burning, 1);
		Set Status(Victim, Event Player, Stunned, 1);
	}
}

rule("에코 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		에코;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Move Speed(Event Player, 200);
		Set Status(All Players(Team Of(Event Player)), Event Player, Phased Out, 3);
	}
}

rule("위도우 메이커 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		위도우메이커;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Damage(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, 25);
		Wait(1, Ignore Condition);
		Damage(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, 50);
		Wait(1, Ignore Condition);
		Damage(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, 100);
	}
}

rule("정크랫 궁사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		정크랫;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	action
	{
		Damage(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, 195.800);
	}
}

rule("토르비욘 궁 사용시")
{
	event
	{
		Player Dealt Damage;
		All;
		토르비욘;
	}

	condition
	{
		Event Player.TOR == True;
	}

	action
	{
		Damage(Victim, Event Player, 10);
		Set Facing(Victim, Down, To World);
	}
}

rule("트레이서 궁 사용시")
{
	event
	{
		Player Dealt Damage;
		All;
		트레이서;
	}

	condition
	{
		Event Damage > 100;
	}

	action
	{
		Damage(Victim, Null, 1000);
	}
}

rule("파라 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		파라;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Kill(Players On Hero(Hero(둠피스트), All Teams), Event Player);
		Kill(Players On Hero(Hero(리퍼), All Teams), Event Player);
		Kill(Players On Hero(Hero(모이라), All Teams), Event Player);
		Kill(Players On Hero(Hero(솜브라), All Teams), Event Player);
		Kill(Players On Hero(Hero(위도우메이커), All Teams), Event Player);
		Kill(Players On Hero(Hero(시그마), All Teams), Event Player);
	}
}

rule("한조 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		한조;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, Knocked Down, 4.500);
	}
}

rule("루시우 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		루시우;
	}

	condition
	{
		Health(Event Player) > 300;
	}

	action
	{
		Set Status(All Players(All Teams), Event Player, Rooted, 5);
		Set Status(All Players(All Teams), Event Player, Hacked, 5);
		Set Primary Fire Enabled(All Players(All Teams), False);
		Set Secondary Fire Enabled(All Players(All Teams), False);
		For Player Variable(Event Player, RUSIU, 0, 5, 0.150);
			Heal(Event Player, Event Player, 100000);
			Communicate(All Players(All Teams), Emote Up);
			Wait(0.150, Ignore Condition);
		End;
		Set Primary Fire Enabled(All Players(All Teams), True);
		Set Secondary Fire Enabled(All Players(All Teams), True);
	}
}

rule("메르시 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		메르시;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Resurrect(All Players(Team Of(Event Player)));
		Heal(All Players(Team Of(Event Player)), Event Player, 100000);
	}
}

rule("모이라 궁 사용시")
{
	event
	{
		Player Dealt Damage;
		All;
		모이라;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(Victim, Event Player, Rooted, 1);
	}
}

rule("모이라 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		모이라;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, Hacked, 1);
	}
}

rule("바티스트 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		바티스트;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(Event Player, Event Player, Unkillable, 10);
		For Player Variable(Event Player, BINANG, 0, 10, 0.500);
			Heal(Players Within Radius(Event Player, 15, Team Of(Event Player), Off), Event Player, 20);
			Wait(0.500, Ignore Condition);
		End;
	}
}

rule("브리기테 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		브리기테;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Teleport(All Players(Team Of(Event Player)), Event Player);
		Heal(All Players(Team Of(Event Player)), Event Player, 350);
	}
}

rule("아나 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		아나;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Event Player.ANA = False;
	}
}

rule("젠야타 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		젠야타;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Status(All Players(All Teams), Event Player, Asleep, 2.500);
		Wait(2.600, Ignore Condition);
		Set Status(All Players(All Teams), Event Player, Asleep, 2.500);
	}
}

rule("아나 궁 사용시")
{
	event
	{
		Player Dealt Damage;
		All;
		아나;
	}

	condition
	{
		Event Player.ANA == False;
		Event Damage > 25;
	}

	action
	{
		Damage(Victim, Event Player, 20);
		Set Status(Victim, Event Player, Knocked Down, 1.500);
	}
}

rule("아나 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.ANA == False;
	}

	action
	{
		Wait(8, Ignore Condition);
		Event Player.ANA = True;
	}
}

rule("아나 변수 초기화")
{
	event
	{
		Ongoing - Each Player;
		All;
		아나;
	}

	condition
	{
		Has Spawned(Event Player) == True;
	}

	action
	{
		Event Player.ANA = True;
	}
}

rule("시그마 궁 사용시 시간쿨")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.SIGMA == False;
	}

	action
	{
		Wait(20, Ignore Condition);
		Set Gravity(All Players(All Teams), 100);
		Set Projectile Gravity(All Players(All Teams), 100);
		Event Player.SIGMA = True;
	}
}

rule("시그마 변수 초기화")
{
	event
	{
		Ongoing - Each Player;
		All;
		시그마;
	}

	condition
	{
		Has Spawned(Event Player) == True;
	}

	action
	{
		Event Player.SIGMA = True;
	}
}

rule("겐지 궁 사용시")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Invisible(Event Player, All);
		Set Damage Dealt(Event Player, 160);
		Apply Impulse(Event Player, Up, 20, To Player, Incorporate Contrary Motion);
		Create Effect(All Players(All Teams), Sphere, Color(White), Event Player, 0.100, Visible To Position and Radius);
		Wait(0.100, Ignore Condition);
		Event Player.GEN = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(White), Event Player, 0.500, Visible To Position and Radius);
		Wait(0.100, Ignore Condition);
		Event Player.GEN2 = Last Created Entity;
	}
}

rule("겐지 궁 끝날시")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Using Ultimate(Event Player) != True;
	}

	action
	{
		Destroy Effect(Event Player.GEN);
		Destroy Effect(Event Player.GEN2);
		Set Invisible(Event Player, None);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("에코 궁 끝날시")
{
	event
	{
		Ongoing - Each Player;
		All;
		에코;
	}

	condition
	{
		Is Using Ultimate(Event Player) != True;
	}

	action
	{
		Set Move Speed(Event Player, 100);
		Set Status(All Players(Team Of(Event Player)), Event Player, Phased Out, 2.500);
	}
}

rule("능력 보여주기")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		If(Hero Of(Event Player) == Hero(D.Va));
			Create HUD Text(Event Player, Custom String("자폭이 터질시 모든 살아있는 적의 최대 체력을 20%로 너프해 버린다.\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(라인하르트));
			Create HUD Text(Event Player, Custom String("땅에 있을시 자동으로 점프를 하며 점프시 망치를 사용한다 (4~5번 랜덤 사용)\r"), Null, Null, Left, 0, Color(White),
				Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(레킹볼));
			Create HUD Text(Event Player, Custom String("플레이어들이 적과의 거리가 10M안으로 가까워질시 사망하게 된다.\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(로드호그));
			Create HUD Text(Event Player, Custom String("공세를 유지하라고 외치며 모든 속도가 55% 줄어든다\r"), Null, Null, Left, 0, Color(White), Color(White),
				Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(시그마));
			Create HUD Text(Event Player, Custom String("우주가 응답하여 20초간 모든 중력이 90% 줄어든다"), Null, Null, Left, 0, Color(White), Color(White),
				Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(오리사));
			Create HUD Text(Event Player, Custom String("0.1초 해킹후 모든적이 2초간 얼려지며 아군에게 400의 힐을 합니다.\r"), Null, Null, Left, 0, Color(White),
				Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(윈스턴));
			Create HUD Text(Event Player, Custom String("울음소리로 모든 적을 3.5초간 스턴상태에 빠지게 만들며 가장 가까운 적의 위치로 텔레포트한다\r"), Null, Null, Left, 0, Color(
				White), Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(자리야));
			Create HUD Text(Event Player, Custom String("모든 플레이어가 주공격, 보조공격키를 강제로 한번씩 누르게 되며 앞으로 매우 빠르게 가속하게 된다\r"), Null, Null, Left, 0,
				Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(겐지));
			Create HUD Text(Event Player, Custom String("투명효과 [이펙트가 대신 위치 표시], 공격력 65%증가\r"), Null, Null, Left, 0, Color(White), Color(White),
				Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(둠피스트));
			Create HUD Text(Event Player, Custom String("일격된 15M내의 모든 플레이어가 사망한다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(
				White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(리퍼));
			Create HUD Text(Event Player, Custom String("궁 사용 중 리퍼에게 한번이라도 맞은 영웅은 죽는다\r"), Null, Null, Left, 0, Color(White), Color(White),
				Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(맥크리));
			Create HUD Text(Event Player, Custom String("20M크기의 석양이 궁을 사용한 위치로 진다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(
				White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(메이));
			Create HUD Text(Event Player, Custom String("모든 적을 순식간에 6.5초동안 얼린다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(
				White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(바스티온));
			Create HUD Text(Event Player, Custom String("아군 체력이 최대 150 회복되며 바스티온의 이동속도가 3배 빨라진다\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(솔저: 76));
			Create HUD Text(Event Player, Custom String("무적이 되며, 생체장이 깔립니다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(White),
				Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(솜브라));
			Create HUD Text(Event Player, Custom String("모든 옴닉(기계)이 파괴된다 또한 파라는 위치에 관계없이 해킹된다"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(시메트라));
			Create HUD Text(Event Player, Custom String("적에게 0 ~ 100사이의 랜덤 데미지를 3번 입힌다\r"), Null, Null, Left, 0, Color(White), Color(White),
				Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(애쉬));
			Create HUD Text(Event Player, Custom String("애쉬에게 한번이라도 공격을 받은 적 영웅은 궁이 끝날때까지  불에 타며 스턴에 걸립니다\r"), Null, Null, Left, 0, Color(
				White), Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(에코));
			Create HUD Text(Event Player, Custom String("회로가동중 궁을 사용하면 모든 아군이 속도가 2배향상 통과무적 상태(망령화와 같은 효과)가 3초동안 유지 궁이 끝날시에도 2.5초간 통과 무적상태\r"),
				Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(위도우메이커));
			Create HUD Text(Event Player, Custom String("모든 적팀에게 25 > 50 > 100 (총 175)데미지를 단계별로 줍니다\r"), Null, Null, Left, 0, Color(White),
				Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(정크랫));
			Create HUD Text(Event Player, Custom String("폭탄이 터질때 적팀의 모든 플레이어에게 195.8의 추가피해를 입힌다\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(토르비욘));
			Create HUD Text(Event Player, Custom String("10초간 데미지를 입은 상대적이 뜨거운 열기로 인하여 10의 추가데미지를 입으며 아래를 바라봅니다\r"), Null, Null, Left, 0,
				Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(트레이서));
			Create HUD Text(Event Player, Custom String("100이상의 데미지를 입힌 적에게 데미지 1000의 추가데미지를 줍니다\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(파라));
			Create HUD Text(Event Player, Custom String("모든 탈론이 사망한다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(White),
				Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(한조));
			Create HUD Text(Event Player, Custom String("모든적이 4.5초동안 넉다운이된다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(White),
				Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(메르시));
			Create HUD Text(Event Player, Custom String("모든 아군이 부활하며 또한 최대 피로 회복이된다\r"), Null, Null, Left, 0, Color(White), Color(White),
				Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(모이라));
			Create HUD Text(Event Player, Custom String("모든 적이 1초간 해킹되며 데미지를 입은 적은 1초간 움직이지 못한다\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(바티스트));
			Create HUD Text(Event Player, Custom String("사격 도움을 위해 거리 15M이내의 아군에게 0.5초당 20씩 힐을 해준다\r"), Null, Null, Left, 0, Color(White),
				Color(White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(브리기테));
			Create HUD Text(Event Player, Custom String("모든 아군이 브리기테에게 집결하며 순간적으로 350만큼 힐을 한다\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(아나));
			Create HUD Text(Event Player, Custom String("8초동안 공격시 40만큼 추가피해를 입히며 1.5초간 넉다운 시킨다\r"), Null, Null, Left, 0, Color(White), Color(
				White), Color(White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(젠야타));
			Create HUD Text(Event Player, Custom String("모든 영웅을 5초동안 재운다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(White),
				Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		Else If(Hero Of(Event Player) == Hero(루시우));
			Create HUD Text(Event Player, Custom String("모든플레이어가 5초 동안 감정표현을 한다\r"), Null, Null, Left, 0, Color(White), Color(White), Color(
				White), Visible To and String, Default Visibility);
			Event Player.hub = Last Text ID;
		End;
	}
}

rule("능력 표시 지우기")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.hub);
	}
}

rule("토르비욘 궁 온")
{
	event
	{
		Ongoing - Each Player;
		All;
		토르비욘;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Event Player.TOR = True;
		Wait(10, Ignore Condition);
		Event Player.TOR = False;
	}
}

rule("토르비욘 궁 초기화")
{
	event
	{
		Ongoing - Each Player;
		All;
		토르비욘;
	}

	action
	{
		Event Player.TOR = False;
	}
}

rule("메이")
{
	event
	{
		Ongoing - Each Player;
		All;
		메이;
	}

	condition
	{
		Ultimate Charge Percent(Players On Hero(Hero(트레이서), Team Of(Event Player))) == 100;
	}

	action
	{
		Allow Button(Event Player, Button(Ultimate));
		Big Message(Event Player, Custom String("*궁 사용이 가능합니다*"));
	}
}

rule("눈보라")
{
	event
	{
		Ongoing - Each Player;
		All;
		메이;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Big Message(All Players(All Teams), Custom String("눈보라에요~~"));
		Teleport(Players On Hero(Hero(트레이서), Team Of(Event Player)), Position Of(Event Player));
		disabled Set Ultimate Charge(Players On Hero(Hero(트레이서), Team Of(Event Player)), 100);
		Set Status(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces And All Barriers),
			Players On Hero(Hero(트레이서), Team Of(Event Player)), Frozen, 3.500);
		Damage(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces And All Barriers), Event Player,
			150);
		For Player Variable(Event Player, meicou, 0, 5, 1);
			Play Effect(All Players(All Teams), Good Explosion, Color(Aqua), Event Player, 20);
			Wait(0.250, Ignore Condition);
		End;
	}
}

rule("라인 방벽")
{
	event
	{
		Ongoing - Each Player;
		All;
		라인하르트;
	}

	condition
	{
		Distance Between(Event Player, Players On Hero(Hero(브리기테), Team Of(Event Player))) <= 3;
		Is Button Held(Players On Hero(Hero(브리기테), Team Of(Event Player)), Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	action
	{
		Start Scaling Barriers(Event Player, 2, True);
		Set Max Health(Event Player, 200);
		Big Message(All Players(Team Of(Event Player)), Custom String("방벽 전개!!"));
		Set Ability Charge(Event Player, Button(Secondary Fire), 3200);
		Set Ability Resource(Event Player, Button(Secondary Fire), 3200);
		Wait Until(Distance Between(Event Player, Players On Hero(Hero(브리기테), Team Of(Event Player))) > 3 || (Is Button Held(
			Players On Hero(Hero(브리기테), Team Of(Event Player)), Button(Secondary Fire)) != True || Is Button Held(Event Player, Button(
			Secondary Fire)) != True) == True, 99999);
		Stop Scaling Barriers(Event Player);
		Set Max Health(Event Player, 100);
	}
}

rule("메이 궁 사용불가능")
{
	event
	{
		Ongoing - Each Player;
		All;
		메이;
	}

	condition
	{
		Ultimate Charge Percent(Players On Hero(Hero(트레이서), Team Of(Event Player))) != 100;
	}

	action
	{
		Disallow Button(Event Player, Button(Ultimate));
		Big Message(Event Player, Custom String("*궁 사용이 불가능합니다*"));
	}
}

rule("메이와 트레이서가 아닐시")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		(Hero Of(Event Player) == Hero(메이) || Hero Of(Event Player) == Hero(트레이서)) != True;
	}

	action
	{
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("메이와 트레이서 일시")
{
	event
	{
		Ongoing - Each Player;
		All;
		메이;
	}

	action
	{
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("메르시 능력")
{
	event
	{
		Ongoing - Each Player;
		All;
		메르시;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Resurrect(Players Within Radius(Event Player, 50, Team Of(Event Player), Off));
		Heal(Players Within Radius(Event Player, 50, Team Of(Event Player), Off), Event Player, 100000);
		Big Message(All Players(All Teams), Custom String("영웅은 죽지 않아요"));
	}
}

rule("겐지 능력")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Apply Impulse(Event Player, Up, 30, To World, Cancel Contrary Motion XYZ);
		Set Status(Event Player, Event Player, Invincible, 5);
		Set Damage Dealt(Event Player, 150);
		Big Message(All Players(All Teams), Custom String("용신의 검을 받아라!"));
	}
}

rule("겐지 OFF")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is Using Ultimate(Event Player) != True;
	}

	action
	{
		Set Damage Dealt(Event Player, 100);
	}
}

rule("라인하르트")
{
	event
	{
		Ongoing - Each Player;
		All;
		라인하르트;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("브리기테와 라인이 일정거리(3M)에서 방패를 동시에 들시 라인하르트의 방벽이 3배로 거대해지며 라인의 체력과 방벽이 50% 증가"), Null, Null,
			Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("라인하르트 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		라인하르트;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("블기")
{
	event
	{
		Ongoing - Each Player;
		All;
		브리기테;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("브리기테와 라인이 일정거리(3M)에서 방패를 동시에 들시 라인하르트의 방벽이 3배로 거대해지며 라인의 체력과 방벽이 50% 증가"), Null, Null,
			Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("블기 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		브리기테;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("메이")
{
	event
	{
		Ongoing - Each Player;
		All;
		메이;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String(
			"메이가 궁을 사용하면 트레이서가 메이 위치로 이동되고 15M의 눈보라가 발생합니다 (눈보라 성능 - 데미지 150 / 3.5초간 얼음 상태로 만듬)\r\n참고사항 : 메이는 트레이서 궁이 100%일때만 궁 사용 가능\r\n"),
			Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("메이 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		메이;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("트레")
{
	event
	{
		Ongoing - Each Player;
		All;
		트레이서;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String(
			"메이가 궁을 사용하면 트레이서가 메이 위치로 이동되고 15M의 눈보라가 발생합니다 (눈보라 성능 - 데미지 150 / 3.5초간 얼음 상태로 만듬)\r\n참고사항 : 메이는 트레이서 궁이 100%일때만 궁 사용 가능\r\n"),
			Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("트레 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		트레이서;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("겐지")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("궁 사용시 공격력 50%증가 및 5초 무적 및 수직 점프"), Null, Null, Left, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("겐지 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("메르시")
{
	event
	{
		Ongoing - Each Player;
		All;
		메르시;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("궁을 사용시 50M내의 모든 영웅이 부활하며 체력이 회복됩니다"), Null, Null, Left, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("메르시 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		메르시;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("윈스턴 불굴의 의지")
{
	event
	{
		Ongoing - Each Player;
		All;
		윈스턴;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Wait(1, Ignore Condition);
		Set Max Health(Event Player, 300);
		Set Damage Received(Event Player, 80);
	}
}

rule("윈스턴 불굴의 의지 끝")
{
	event
	{
		Ongoing - Each Player;
		All;
		윈스턴;
	}

	condition
	{
		Is Using Ultimate(Event Player) != True;
	}

	action
	{
		Set Max Health(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("윈스턴")
{
	event
	{
		Ongoing - Each Player;
		All;
		윈스턴;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("궁을 사용하면 포효 후 받는 데미지가 20% 줄어들며 상승 체력에서 추가적으로 3배가 됩니다"), Null, Null, Left, 0, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("윈스턴 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		윈스턴;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("모이라 소멸")
{
	event
	{
		Ongoing - Each Player;
		All;
		모이라;
	}

	condition
	{
		Is Using Ability 1(Event Player) != True;
	}

	action
	{
		Set Status(Players Within Radius(Event Player, 6, Team Of(Event Player), Surfaces), Event Player, Invincible, 1);
		For Player Variable(Event Player, moca, 0, 5, 1);
			Play Effect(All Players(All Teams), Good Explosion, Color(Black), Event Player, 6);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Black), Event Player, 6);
			Wait(0.200, Ignore Condition);
		End;
	}
}

rule("모이라")
{
	event
	{
		Ongoing - Each Player;
		All;
		모이라;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("모이라가 소멸을 사용하고 끝나는 위치 6M이내의 아군이 1초간 무적이 됩니다"), Null, Null, Left, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("모이라 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		모이라;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("디바")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	action
	{
		Create HUD Text(Event Player, Custom String("궁 차징율이 10% 증가하며 메카를 탈 시 충격파 데미지가 6배 증가합니다"), Null, Null, Left, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.box = Last Text ID;
	}
}

rule("디바 없애기")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	condition
	{
		Is Button Held(Event Player, Button(Crouch)) != True;
	}

	action
	{
		Destroy HUD Text(Event Player.box);
	}
}

rule("디바 충격파")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	condition
	{
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Damage Dealt(Event Player, 600);
		Wait(2, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
	}
}